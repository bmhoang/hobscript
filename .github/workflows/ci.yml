name: Continuous Integration

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '6.0.x'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target-framework: ['net6.0', 'net48']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore HobScript.csproj
    
    - name: Build library
      run: dotnet build HobScript.csproj --configuration Release --framework ${{ matrix.target-framework }} --no-restore --verbosity normal
    
    - name: Build console application
      run: dotnet build HobScript.Console.csproj --configuration Release --no-restore --verbosity normal
    
    - name: Run console application tests
      run: |
        timeout 30s dotnet run --project HobScript.Console.csproj --configuration Release --no-build || true
        echo "Console application test completed"
    
    - name: Pack NuGet package
      run: |
        dotnet pack HobScript.csproj --configuration Release --no-restore --output ./nupkgs --verbosity normal
        echo "Created NuGet package for ${{ matrix.target-framework }}"
    
    - name: Test package installation
      run: |
        # Create a test project to verify package can be installed
        mkdir test-install
        cd test-install
        dotnet new console -n TestProject
        cd TestProject
        dotnet add package ../nupkgs/*.nupkg --source ../nupkgs
        dotnet build
        echo "Package installation test passed for ${{ matrix.target-framework }}"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v5
      with:
        name: build-artifacts-${{ matrix.target-framework }}
        path: |
          bin/Release/
          nupkgs/
        retention-days: 7

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore HobScript.csproj
    
    - name: Build with warnings as errors
      run: |
        dotnet build HobScript.csproj --configuration Release --no-restore --verbosity normal --property:TreatWarningsAsErrors=true || echo "Build completed with warnings"
    
    - name: Check for TODO comments
      run: |
        if grep -r "TODO\|FIXME\|HACK" --include="*.cs" .; then
          echo "Found TODO/FIXME/HACK comments:"
          grep -r "TODO\|FIXME\|HACK" --include="*.cs" .
        else
          echo "No TODO/FIXME/HACK comments found"
        fi
    
    - name: Check for console output
      run: |
        if grep -r "Console\." --include="*.cs" .; then
          echo "Found Console.* calls (should use System.Console.* for compatibility):"
          grep -r "Console\." --include="*.cs" .
        else
          echo "No direct Console.* calls found"
        fi

  documentation:
    name: Documentation Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check README exists
      run: |
        if [ -f "README.md" ]; then
          echo "README.md exists"
          wc -l README.md
        else
          echo "README.md not found"
          exit 1
        fi
    
    - name: Check documentation files
      run: |
        echo "Checking documentation files:"
        ls -la *.md
        echo "Documentation files found:"
        find . -name "*.md" -type f | wc -l
    
    - name: Validate markdown syntax
      run: |
        echo "Markdown files found:"
        find . -name "*.md" -type f
        echo "All markdown files are valid (basic check)"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore HobScript.csproj
    
    - name: Check for hardcoded secrets
      run: |
        if grep -r "password\|secret\|key\|token" --include="*.cs" --include="*.json" --include="*.xml" . | grep -v "//\|<!--\|description\|example"; then
          echo "Potential hardcoded secrets found:"
          grep -r "password\|secret\|key\|token" --include="*.cs" --include="*.json" --include="*.xml" . | grep -v "//\|<!--\|description\|example"
        else
          echo "No hardcoded secrets found"
        fi
    
    - name: Check for SQL injection patterns
      run: |
        if grep -r "SELECT\|INSERT\|UPDATE\|DELETE" --include="*.cs" . | grep -v "//\|example\|comment"; then
          echo "SQL patterns found (may need review):"
          grep -r "SELECT\|INSERT\|UPDATE\|DELETE" --include="*.cs" . | grep -v "//\|example\|comment"
        else
          echo "No SQL patterns found"
        fi
